# Cursor Rules for Attendance Management System

## 一般的なガイドライン
あなたは **TypeScript, Node.js, Next.js App Router, React, Shadcn UI, Radix UI, Tailwind CSS** の専門家です。

## コードスタイルと構造
- **簡潔で技術的に正確な TypeScript コード** を記述する。
- **関数型・宣言型プログラミング** を採用し、クラスは避ける。
- **コードの重複を避け、モジュール化** を優先する。
- **isLoading, hasError** などの補助動詞付きの変数名を使用する。
- ファイル構成:
  1. エクスポートするコンポーネント
  2. サブコンポーネント
  3. ヘルパー関数
  4. 静的コンテンツ
  5. 型定義

## 命名規則
- ディレクトリ名は **小文字+ハイフン** (`components/auth-wizard`)。
- コンポーネントは **名前付きエクスポート** を優先する。

## TypeScript の使用
- **全てのコードを TypeScript で記述**。
- **`interface` を `type` より優先する**。
- **`enum` は使用せず `map` を利用する**。
- **関数型コンポーネント** を使用。

## 構文とフォーマット
- **純粋関数には `function` キーワードを使用**。
- **単純な条件分岐では中括弧 `{}` を省略**。
- **宣言型 JSX を使用**。

## UIとスタイリング
- **Shadcn UI, Radix UI, Tailwind CSS** を使用する。
- **レスポンシブデザインを Tailwind で実装**。

## パフォーマンス最適化
- **`use client` `useEffect` `setState` の使用を最小限に**。
- **クライアントコンポーネントは Suspense でラップ**。
- **非クリティカルなコンポーネントは動的読み込み**。
- **画像最適化 (WebP, サイズ指定, 遅延読み込み)**。

## 主要なルール
- **`nuqs` を URL パラメータ管理に使用**。
- **Web Vitals (LCP, CLS, FID) を最適化**。
- **Next.js SSR を優先し、`use client` は最小限に**。
- **Next.js の Data Fetching, Rendering, Routing の公式ドキュメントを参照**。

---

# 勤怠管理システムの追加ルール

## ディレクトリ構成と依存関係
- **Next.js App Router + Supabase** を使用。
- 以下のリポジトリ構成を厳守:
  ```
  /project-root
    ├── /config
    │    ├── database/  # Supabase のテーブル定義・リレーション
    │    ├── features/  # 勤怠管理システムの機能仕様
  ```
- **`config/database/` にある Supabase のスキーマを必ず参照**。
- **`config/features/` にある機能仕様を確認してから実装・修正する**。

## 実装ルール
- **複雑な依存関係がある場合、十分な解析時間を取る**。
- **判断に迷った場合は一度立ち止まり、構造を確認する**。
- **関連する構造定義ファイルの確認を必ず実施**。
- **Supabase のルールと制約に基づいてデータ操作を行う**。
- **`config/api/endpoints.json` に準拠して API を実装**。

## データバリデーションとビジネスロジック
- **`config/api/validation.json` のバリデーションルールを適用**。
- **勤怠記録・シフト管理・承認フローの一貫性を保持**。
- **データ整合性を確保し、無効なデータが登録されないようにする**。

## テストとドキュメント
- **全ての主要変更を `README.md` に記録**。
- **Jest または Cypress を使用した自動テストを実装**。
- PR マージ前に以下を検証:
  - 業務機能に関するデータベースの変更が `config/database/public.schema.json` に一致するか。
  - 認証に関するデータベースの変更が `config/database/auth.schema.json` に一致するか。
  - API レスポンスが `config/api/endpoints.json` に準拠しているか。

## バグ修正
console.logを仕込んでステップ・バイ・ステップで原因究明に努めてください

## エラーハンドリング
- **API 障害やデータベーストランザクションに対して適切なエラーハンドリングを実装**。
- **ログ記録を行い、勤怠処理のエラーを追跡できるようにする**。

